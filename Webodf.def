Bootstrap: docker
From: nvidia/cuda:12.0.1-runtime-ubuntu22.04


%labels
    Author ZIH
    Requires CUDA driver 418.39+.

%post
    TZ=Asia/Dubai
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    echo "UTC" > /etc/timezone
    . /.singularity.d/env/10-docker*.sh

    apt-get update
    apt install -y python3-pip
    pip install rasterio
    #apt-get install -y cuda-compat-10.1
    apt-get install -y libibverbs-dev ibverbs-utils
    # Install basic development tools
    apt-get install -y gcc g++ make wget python3 python-is-python3
    apt-get install -y binutils libproj-dev gdal-bin nginx
    apt-get install -y git
    apt-get install -y postgresql
    apt-get install -y rasterio
    apt-get install -y python3 python3-pip python3-setuptools python3-wheel git g++ python3-dev python2.7-dev libpq-dev binutils libproj-dev gdal-bin pdal libgdal-dev python3-gdal nginx certbot grass-core gettext-base cron gettext tzdata
    apt-get install -y npm
    apt install -y redis-server
    apt-get autoremove; apt-get clean
   

    cd /tmp

    #: ${SLURM_VERSION:=17-02-11-1}
    #wget https://github.com/SchedMD/slurm/archive/slurm-${SLURM_VERSION}.tar.gz
    #tar -xf slurm-${SLURM_VERSION}.tar.gz
    #    cd slurm-slurm-${SLURM_VERSION}
    #    ./configure --prefix=/usr/ --sysconfdir=/etc/slurm --localstatedir=/var --disable-debug
    #    make -C contribs/pmi2 -j$(nproc) install
    #cd ..
    #rm -rf slurm-*

    #: ${OPENMPI_VERSION:=3.1.4}
    #wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz
    #tar -xf openmpi-${OPENMPI_VERSION}.tar.gz
    #cd openmpi-${OPENMPI_VERSION}/
    #./configure --prefix=/usr/ --with-pmi --with-verbs --with-cuda
    #make -j$(nproc) install
    #echo "mpi_warn_on_fork = 0" >> /usr/etc/openmpi-mca-params.conf
    #echo "btl_openib_warn_default_gid_prefix = 0" >> /usr/etc/openmpi-mca-params.conf
    #cd ..
    #rm -rf openmpi-*

   # service postgresql start
   # su postgres -c "psql -c '\x' -c 'CREATE DATABASE webodm_dev;'"
   # su postgres -c "psql -c '\x' -c 'ALTER SYSTEM SET postgis.enable_outdb_rasters TO True;'"
   # su postgres -c "psql -c '\x' -c 'ALTER SYSTEM SET postgis.gdal_enabled_drivers TO 'GTiff';'"
   # redis-server
    #mkdir software
    cd software
    #git clone --depth 1 https://github.com/OpenDroneMap/WebODM
    rm requirements*
    wget https://raw.githubusercontent.com/bommix/WebODMSingularity/main/requirements.txt
    pip install -r requirements.txt
    cd WebODM

    pip install -r requirements.txt
    npm install -g webpack
    npm install -g webpack-cli
    npm install
    webpack --mode production
    python manage.py collectstatic --noinput
    chmod +x start.sh && ./start.sh --no-gunicorn

    
